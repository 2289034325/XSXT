<#@ template hostspecific="true" language="C#" #>
<#@ include file="EF.Utility.CS.ttinclude" #><#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
#>
using System;
using System.Collections.Generic;

namespace <#= code.EscapeNamespace(efHost.Namespace) #>
{
    public partial class <#= efHost.EntityType.Name #>
    {
<#
    var collectionNavigations = efHost.EntityType.NavigationProperties.Where(
        np => np.DeclaringType == efHost.EntityType
            && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);

    // Add a ctor to initialize any collections
    if (collectionNavigations.Any())
    {
#>
        public <#= code.Escape(efHost.EntityType) #>()
        {
<#
        foreach (var navProperty in collectionNavigations)
        {
			//如果某列被同一个外检表引用多次，将外键名称按 _ 分隔，取最后一段，作为导航属性名
			string vProp = "";
			var prps = efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType && 
				np.ToEndMember.Name == navProperty.ToEndMember.Name &&
				np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
			if(prps.Count()>1)
            {
				string fkName = ((AssociationType)navProperty.RelationshipType).Name;
				vProp = fkName.Split(new char[]{'_'}).Last();
			}
			else
            {
				vProp = navProperty.Name;
			}

			//如果外键表是自身
			if(navProperty.ToEndMember.GetEntityType().Name == efHost.EntityType.Name)
            {
				string fkName = ((AssociationType)navProperty.RelationshipType).Name;
				vProp = fkName.Split(new char[]{'_'}).Last();
			}
#>
            this.<#= code.Escape(vProp) #> = new List<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>>();
<#
        }
#>
        }

<#
    }
        
    foreach (var property in efHost.EntityType.Properties)
    {
        var typeUsage = code.Escape(property.TypeUsage);

        // Fix-up spatial types for EF6
        if (efHost.EntityFrameworkVersion >= new Version(6, 0)
            && typeUsage.StartsWith("System.Data.Spatial."))
        {
            typeUsage = typeUsage.Replace(
                "System.Data.Spatial.",
                "System.Data.Entity.Spatial.");
        }
#>
        <#= Accessibility.ForProperty(property) #> <#= typeUsage #> <#= code.Escape(property) #> { get; set; }
<#
    }
	string debugStr="";
    foreach (var navProperty in efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType))
    {
        if (navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many)
        {
			//如果某列被同一个外检表引用多次，将外键名称按 _ 分隔，取最后一段，作为导航属性名
			string vProp = "";
			var prps = efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType && 
				np.ToEndMember.Name == navProperty.ToEndMember.Name &&
				np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
			if(prps.Count()>1)
            {
				string fkName = ((AssociationType)navProperty.RelationshipType).Name;
				vProp = fkName.Split(new char[]{'_'}).Last();
			}
			else
            {
				vProp = navProperty.Name;
			}

			//如果外键表是自身
			if(navProperty.ToEndMember.GetEntityType().Name == efHost.EntityType.Name)
            {
				string fkName = ((AssociationType)navProperty.RelationshipType).Name;
				vProp = fkName.Split(new char[]{'_'}).Last();
			}
#>
        public virtual ICollection<<#= code.Escape(navProperty.ToEndMember.GetEntityType()) #>> <#= code.Escape(vProp) #> { get; set; }
<#
        }
        else
        {
			//如果有多个列指向同一个外键表，，将外键名称按 _ 分隔，取倒数第二个，作为导航属性名
			string vProp = "";
			var prps = efHost.EntityType.NavigationProperties.Where(np => np.DeclaringType == efHost.EntityType && 
				np.ToEndMember.Name == navProperty.ToEndMember.Name &&
				np.ToEndMember.RelationshipMultiplicity != RelationshipMultiplicity.Many);
			if(prps.Count()>1)
            {
				string fkName = ((AssociationType)navProperty.RelationshipType).Name;
				vProp = fkName.Split(new char[]{'_'}).Skip(2).First();
			}
			else
            {
				vProp = navProperty.ToEndMember.Name;
			}

			//如果外键表是自身
			if(navProperty.ToEndMember.GetEntityType().Name == efHost.EntityType.Name)
            {
				string fkName = ((AssociationType)navProperty.RelationshipType).Name;
				vProp = fkName.Split(new char[]{'_'}).Skip(2).First();
			}
#>
        public virtual <#= code.Escape(navProperty.ToEndMember.GetEntityType()) #> <#= code.Escape(vProp) #> { get; set; }
<#
        }
    }
#>
    }
}
